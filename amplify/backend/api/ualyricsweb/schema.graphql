
type Artist
  @model
  @key(name:"ByFirstLetter", fields: ["firstLetter", "title"], queryField:"getArtistsByFirstLetter")
  @aws_api_key
  @aws_cognito_user_pools
  @auth (
    rules: [
      { allow: public, operations: [read] },
      { allow: private, operations: [read, create] },
      { allow: groups, groups: ["Admin"], operations: [create, update, read, delete] },
    ]
  ) 
{
  id: ID!
  geniusId: Int!
  firstLetter: String!
  title: String!
  description: String
  thumbnailUrl: String!
  albums: [Album] @connection(keyName: "byArtist", fields: ["id"])
  songs: [Song] @connection(keyName: "byArtist", fields: ["id"])
}

type Album
  @model
  @key(name: "byArtist", fields: ["artistId", "title"], queryField:"getAlbumsByArtistId")
  @aws_api_key
  @aws_cognito_user_pools
  @auth (
    rules: [
      { allow: public, operations: [read] },
      { allow: private, operations: [read, create] },
      { allow: groups, groups: ["Admin"], operations: [create, update, read, delete] },
    ]
  )
{
  id: ID!
  artistId: ID!
  geniusId: Int!
  title: String!
  thumbnailUrl: String!
  songs: [Song] @connection(keyName: "byAlbum", fields: ["id"])
}

type Song 
  @model
  @key(name: "byArtist", fields: ["artistId", "title"], queryField:"getSongsByArtistId")
  @key(name: "byAlbum", fields: ["albumId", "title"], queryField:"getSongsByAlbumId")
  @key(name: "byGeniuslId", fields: ["geniusId"], queryField:"getSongByGeniuslId")
  @aws_api_key
  @aws_cognito_user_pools
  @auth (
    rules: [
      { allow: public, operations: [read] },
      { allow: private, operations: [read, create] },
      { allow: groups, groups: ["Admin"], operations: [create, update, read, delete] },
    ]
  )
{
  id: ID!
  artistId: ID!
  albumId: ID!
  geniusId: Int!
  artist: Artist @connection(fields: ["artistId"])
  album: Album @connection(fields: ["albumId"])
  title: String!
  imageUrl: String!
  lyrics: String!
  referents: [Referent]
}

type Referent {
  geniusId: Int!
  content: String!
  records: [Annotation]
}

type Annotation {
  geniusId: Int!
  text: String!
  author: String!
  authorThumbnailUrl: String!
}

type Translation
  @model
  @key(name: "bySong", fields: ["songId", "rating"], queryField:"getTranslationsBySongId")
  @key(name: "byOwner", fields: ["owner", "createdAt"], queryField:"getTranslationsByOwner")
  @aws_api_key
  @aws_cognito_user_pools
  @auth (
    rules: [
      { allow: owner },
      { allow: public, operations: [read] },
      { allow: groups, groups: ["Admin"], operations: [create, update, read, delete] },
    ]
  )
{
  id: ID!
  owner: String!
  createdAt: AWSDateTime!
  songId: ID!
  rating: Int!
  lyrics: String!
  song: Song @connection(fields: ["songId"])
}

type Comment
  @model
  @key(name: "byTranslation", fields: ["translationId", "createdAt"], queryField:"getCommentsByTranslationId")
  @aws_api_key
  @aws_cognito_user_pools
  @auth (
    rules: [
      { allow: owner },
      { allow: public, operations: [read] },
      { allow: groups, groups: ["Admin"], operations: [create, update, read, delete] },
    ]
  )
{
  id: ID!
  translationId: ID!
  createdAt: AWSDateTime!
  text: String!
  lineNumber: Int,
  translation: Translation @connection(fields: ["translationId"])
}

type Query {
  # Triggers getlyrics Lambda that scrapes song lyrics from genius.com
  getLyrics(url: String): SongLyricsResponse @function(name: "getlyrics-${env}")
  # Queries Genius API for song details
  getGeniusSong(id: Int): GeniusSong
  # Queries Genius API for songs matching song term
  searchGeniusSong(term: String): [GeniusSongEntry]
}

type SongLyricsResponse {
  body: String!
}

type GeniusSongEntry {
  id: Int!
  title: String!
  url: String!
  header_image_thumbnail_url: String!
  header_image_url: String!
  song_art_image_thumbnail_url: String!
  song_art_image_url: String!
  primary_artist: GeniusArtist!
}

type GeniusSong {
  id: Int!
  title: String!
  url: String!
  header_image_thumbnail_url: String!
  header_image_url: String!
  song_art_image_thumbnail_url: String!
  song_art_image_url: String!
  album: GeniusAlbum
  primary_artist: GeniusArtist!
  media: [GeniusMedia]!
}

type GeniusArtist {
  id: Int!
  name: String!
  header_image_url: String!
  image_url: String!
}

type GeniusAlbum {
  id: Int!
  name: String!
  cover_art_url: String!
}

type GeniusMedia {
  provider: String!
  url: String!
}