
type Artist
  @model
  @key(name:"ByFirstLetter", fields: ["firstLetter", "title"])
  @aws_api_key
  @aws_cognito_user_pools
  @auth (
    rules: [
      { allow: public, operations: [read] },
      { allow: private, operations: [read, create] },
      { allow: groups, groups: ["Admin"], operations: [create, update, read, delete] },
    ]
  ) 
{
  id: ID!
  externalId: String!
  firstLetter: String!
  title: String!
  description: String
  thumbnailUrl: String!
  albums: [Album] @connection(keyName: "byArtist", fields: ["id"])
  songs: [Song] @connection(keyName: "byArtist", fields: ["id"])
}

type Album
  @model
  @key(name: "byArtist", fields: ["artistId", "title"])
  @aws_api_key
  @aws_cognito_user_pools
  @auth (
    rules: [
      { allow: public, operations: [read] },
      { allow: private, operations: [read, create] },
      { allow: groups, groups: ["Admin"], operations: [create, update, read, delete] },
    ]
  )
{
  id: ID!
  artistId: ID!
  title: String!
  thumbnailUrl: String!
  songs: [Song] @connection(keyName: "byAlbum", fields: ["id"])
}

type Song 
  @model
  @key(name: "byArtist", fields: ["artistId", "title"])
  @key(name: "byAlbum", fields: ["albumId", "title"])
  @aws_api_key
  @aws_cognito_user_pools
  @auth (
    rules: [
      { allow: owner },
      { allow: public, operations: [read] },
      { allow: groups, groups: ["Admin"], operations: [create, update, read, delete] },
    ]
  )
{
  id: ID!
  artistId: ID!
  albumId: ID!
  externalId: String!
  artist: Artist @connection(fields: ["artistId"])
  album: Album @connection(fields: ["albumId"])
  title: String!
  imageUrl: String!
  lyrics: [LyricsLine]!
}

type LyricsLine {
  numuber: Int!
  original: String!
  translation: String
}

type Query {
  getLyrics(url: String): SongLyricsResponse @function(name: "getlyrics-${env}")
}

type SongLyricsResponse {
  body: String!
}